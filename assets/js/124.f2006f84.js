(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{484:function(s,e,t){"use strict";t.r(e);var a=t(8),v=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("blockquote",[e("p",[s._v("单机的Redis存在四大问题：\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725144240631.6n735l8wxj7k.webp",alt:""}})])]),s._v(" "),e("h2",{attrs:{id:"_1-redis持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis持久化"}},[s._v("#")]),s._v(" 1. Redis持久化")]),s._v(" "),e("h3",{attrs:{id:"_1-1-rdb持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-rdb持久化"}},[s._v("#")]),s._v(" 1.1 RDB持久化")]),s._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),e("p",[s._v("RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。")])]),s._v(" "),e("h4",{attrs:{id:"_1-1-1-执行时机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-执行时机"}},[s._v("#")]),s._v(" 1.1.1 执行时机")]),s._v(" "),e("p",[s._v("RDB持久化在四种情况下会执行：")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("执行save命令")]),s._v(": save命令会导致"),e("strong",[s._v("主进程")]),s._v("执行RDB，这个过程中其它所有命令都会被阻塞。只有在数据迁移时可能用到")]),s._v(" "),e("li",[e("strong",[s._v("执行bgsave命令")]),s._v(": 这个命令执行后会开启"),e("strong",[s._v("独立进程")]),s._v("完成RDB，主进程可以持续处理用户请求，不受影响")]),s._v(" "),e("li",[e("strong",[s._v("Redis停机时")]),s._v(": Redis停机时会执行一次save命令，实现RDB持久化")]),s._v(" "),e("li",[e("strong",[s._v("触发RDB条件时")]),s._v(": Redis内部有触发RDB的机制")])]),s._v(" "),e("h4",{attrs:{id:"_1-1-2-rdb原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-rdb原理"}},[s._v("#")]),s._v(" 1.1.2 RDB原理")]),s._v(" "),e("blockquote",[e("p",[s._v("bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。")])]),s._v(" "),e("p",[s._v("fork采用的是copy-on-write技术：")]),s._v(" "),e("ul",[e("li",[s._v("当主进程执行读操作时，访问共享内存；")]),s._v(" "),e("li",[s._v("当主进程执行写操作时，则会拷贝一份数据，执行写操作。")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725151319695.4s5u01lxqj28.webp",alt:""}})]),s._v(" "),e("p",[s._v("🔎 RDB的缺点？")]),s._v(" "),e("ul",[e("li",[s._v("RDB执行间隔时间长，两次RDB之间写入数据有丢失的风险")]),s._v(" "),e("li",[s._v("fork子进程、压缩、写出RDB文件都比较耗时")])]),s._v(" "),e("h3",{attrs:{id:"_1-2-aof持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-aof持久化"}},[s._v("#")]),s._v(" 1.2 AOF持久化")]),s._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),e("p",[s._v("AOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件")])]),s._v(" "),e("p",[s._v("AOF的命令记录的频率策略：\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725151654046.5ikekpcp33sw.webp",alt:""}})]),s._v(" "),e("blockquote",[e("p",[s._v("因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行 "),e("strong",[s._v("bgrewriteaof")]),s._v(" 命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果")])]),s._v(" "),e("h3",{attrs:{id:"_1-3-rdb与aof对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-rdb与aof对比"}},[s._v("#")]),s._v(" 1.3 RDB与AOF对比")]),s._v(" "),e("p",[s._v("RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会"),e("strong",[s._v("结合")]),s._v("两者来使用\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725151940515.1fblfdki46bk.webp",alt:""}})]),s._v(" "),e("h2",{attrs:{id:"_2-redis主从"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis主从"}},[s._v("#")]),s._v(" 2. Redis主从")]),s._v(" "),e("blockquote",[e("p",[s._v("单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725152037611.4x1zh65gp79c.webp",alt:""}})]),s._v(" "),e("h3",{attrs:{id:"_2-1-主从数据同步原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-主从数据同步原理"}},[s._v("#")]),s._v(" 2.1 主从数据同步原理")]),s._v(" "),e("h4",{attrs:{id:"_2-1-1-全量同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-全量同步"}},[s._v("#")]),s._v(" 2.1.1 全量同步")]),s._v(" "),e("p",[s._v("主从第一次建立连接时，会执行"),e("strong",[s._v("全量同步")]),s._v("，将master节点的所有数据都拷贝给slave节点，流程：\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725152700914.40g3ii8u64n4.webp",alt:""}})]),s._v(" "),e("ul",[e("li",[s._v("slave节点请求全量同步")]),s._v(" "),e("li",[s._v("master节点判断replid，发现不一致，同意同步")]),s._v(" "),e("li",[s._v("master将完整内存数据生成RDB，发送RDB到slave")]),s._v(" "),e("li",[s._v("slave清空本地数据，加载master的RDB")]),s._v(" "),e("li",[s._v("master将RDB期间的命令记录在repl_baklog，并持续将log中的命令发送给slave")]),s._v(" "),e("li",[s._v("slave执行接收到的命令，保持与master之间的同步")])]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("Replication Id")]),s._v("：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid\n"),e("strong",[s._v("offset")]),s._v("：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。")])]),s._v(" "),e("h4",{attrs:{id:"_2-1-2-增量同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-增量同步"}},[s._v("#")]),s._v(" 2.1.2 增量同步")]),s._v(" "),e("blockquote",[e("p",[s._v("全量同步需要先做RDB，然后将RDB文件通过网络传输个slave，成本太高了。因此除了第一次做全量同步，其它大多数时候slave与master都是做"),e("strong",[s._v("增量同步")]),s._v("。就是只更新slave与master存在差异的部分数据。")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725153201086.1i8nmjwg8ncw.webp",alt:""}})]),s._v(" "),e("h4",{attrs:{id:"_2-1-3-repl-backlog原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-repl-backlog原理"}},[s._v("#")]),s._v(" 2.1.3 repl_backlog原理")]),s._v(" "),e("blockquote",[e("p",[s._v("master怎么知道slave与自己的数据差异在哪里呢?\n这就要说到全量同步时的repl_baklog文件了。")])]),s._v(" "),e("p",[s._v("这个文件是一个固定大小的数组，只不过数组是环形，也就是说"),e("strong",[s._v("角标到达数组末尾后，会再次从0开始读写")]),s._v("，这样数组头部的数据就会被覆盖。")]),s._v(" "),e("img",{attrs:{algin:"left",width:"30%",src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725153359022.3gtiptcit83k.webp"}}),s._v(" "),e("img",{attrs:{align:"right",width:"30%",src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725153715910.xn0wxkxe1sg.webp"}}),s._v(" "),e("ul",[e("li",[s._v("repl_baklog中会记录Redis处理过的命令日志及offset，包括master当前的offset，和slave已经拷贝到的offset：")]),s._v(" "),e("li",[s._v("slave与master的offset之间的差异，就是salve需要增量拷贝的数据了。")]),s._v(" "),e("li",[s._v("随着不断有数据写入，master的offset逐渐变大，slave也不断的拷贝，追赶master的offset")]),s._v(" "),e("li",[s._v("直到"),e("strong",[s._v("数组被填满")]),s._v("：此时，如果有新的数据写入，就会"),e("strong",[s._v("覆盖")]),s._v("数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到slave的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分")])]),s._v(" "),e("blockquote",[e("p",[s._v("但是，如果slave出现网络阻塞，导致master的offset远远超过了slave的offset： 如果master继续写入新数据，其offset就会覆盖旧的数据，直到将slave现在的offset也覆盖")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725154216392.60k76m43krnk.webp",alt:""}})]),s._v(" "),e("h3",{attrs:{id:"_2-2-主从同步优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-主从同步优化"}},[s._v("#")]),s._v(" 2.2 主从同步优化")]),s._v(" "),e("p",[e("mark",[s._v("主从同步可以保证主从数据的一致性，非常重要。")]),s._v("\n可以从以下几个方面来优化Redis主从就集群：")]),s._v(" "),e("ul",[e("li",[s._v("在master中配置repl-diskless-sync yes启用无磁盘复制，避免全量同步时的磁盘IO。")]),s._v(" "),e("li",[s._v("Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO")]),s._v(" "),e("li",[s._v("适当提高repl_baklog的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步")]),s._v(" "),e("li",[s._v("限制一个master上的slave节点数量，如果实在是太多slave，则可以采用主-从-从链式结构，减少master压力,如图:\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725154405899.3uqb2ysl52io.webp",alt:""}})])]),s._v(" "),e("h3",{attrs:{id:"_2-3-小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-小结"}},[s._v("#")]),s._v(" 2.3 小结")]),s._v(" "),e("p",[s._v("简述全量同步和增量同步区别？")]),s._v(" "),e("ul",[e("li",[s._v("全量同步：master将完整内存数据生成RDB，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。")]),s._v(" "),e("li",[s._v("增量同步：slave提交自己的offset到master，master获取repl_baklog中从offset之后的命令给slave")])]),s._v(" "),e("p",[s._v("什么时候执行全量同步？")]),s._v(" "),e("ul",[e("li",[s._v("slave节点第一次连接master节点时")]),s._v(" "),e("li",[s._v("slave节点断开时间太久，repl_baklog中的offset已经被覆盖时")])]),s._v(" "),e("p",[s._v("什么时候执行增量同步？")]),s._v(" "),e("ul",[e("li",[s._v("slave节点断开又恢复，并且在repl_baklog中能找到offset时")])]),s._v(" "),e("h2",{attrs:{id:"_3-redis哨兵"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis哨兵"}},[s._v("#")]),s._v(" 3. Redis哨兵")]),s._v(" "),e("blockquote",[e("p",[s._v("Redis提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。")])]),s._v(" "),e("h3",{attrs:{id:"_3-1-哨兵原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-哨兵原理"}},[s._v("#")]),s._v(" 3.1 哨兵原理")]),s._v(" "),e("h4",{attrs:{id:"_3-1-1-集群结构和作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-集群结构和作用"}},[s._v("#")]),s._v(" 3.1.1 集群结构和作用")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725154528072.7hf44wgiq134.webp",alt:""}}),s._v("\n哨兵的作用如下：")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("监控")]),s._v("：Sentinel 会不断检查您的master和slave是否按预期工作")]),s._v(" "),e("li",[e("strong",[s._v("自动故障恢复")]),s._v("：如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主")]),s._v(" "),e("li",[e("strong",[s._v("通知")]),s._v("：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端")])]),s._v(" "),e("h4",{attrs:{id:"_3-1-2-集群监控原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-集群监控原理"}},[s._v("#")]),s._v(" 3.1.2 集群监控原理")]),s._v(" "),e("p",[s._v("Sentinel基于"),e("strong",[s._v("心跳机制")]),s._v("监测服务状态，每隔1秒向集群的每个实例发送ping命令：")]),s._v(" "),e("ul",[e("li",[s._v("主观下线：如果某sentinel节点发现某实例未在规定时间响应，则认为该实例"),e("strong",[s._v("主观下线")]),s._v("。")]),s._v(" "),e("li",[s._v("客观下线：若超过指定数量（quorum）的sentinel都认为该实例主观下线，则该实例"),e("strong",[s._v("客观下线")]),s._v("。quorum值最好超过Sentinel实例数量的一半。")])]),s._v(" "),e("h4",{attrs:{id:"_3-1-3-集群故障恢复原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-集群故障恢复原理"}},[s._v("#")]),s._v(" 3.1.3 集群故障恢复原理")]),s._v(" "),e("p",[e("strong",[s._v("1) 新主节点选择")]),s._v("\n一旦发现master故障，sentinel需要在salve中选择一个作为新的master，选择依据是这样的：")]),s._v(" "),e("ul",[e("li",[s._v("首先会判断slave节点与master节点"),e("strong",[s._v("断开时间长短")]),s._v("，如果超过指定值（down-after-milliseconds * 10）则会排除该slave节点")]),s._v(" "),e("li",[s._v("然后判断slave节点的"),e("strong",[s._v("slave-priority")]),s._v("值，越小优先级越高，如果是0则永不参与选举")]),s._v(" "),e("li",[s._v("如果slave-prority一样，则判断slave节点的"),e("strong",[s._v("offset")]),s._v("值，越大说明数据越新，优先级越高")]),s._v(" "),e("li",[s._v("最后是判断slave节点的"),e("strong",[s._v("运行id大小")]),s._v("，越小优先级越高。")])]),s._v(" "),e("p",[e("strong",[s._v("2) 故障转移恢复")])]),s._v(" "),e("ul",[e("li",[s._v("sentinel给备选的slave1节点发送slaveof no one命令，让该节点成为master")]),s._v(" "),e("li",[s._v("sentinel给所有其它slave发送slaveof 192.168.150.101 7002 命令，让这些slave成为新master的从节点，开始从新的master上同步数据。")]),s._v(" "),e("li",[s._v("最后，sentinel将故障节点标记为slave，当故障节点恢复后会自动成为新的master的slave节点")])]),s._v(" "),e("h2",{attrs:{id:"_4-redis分片集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis分片集群"}},[s._v("#")]),s._v(" 4. Redis分片集群")]),s._v(" "),e("h3",{attrs:{id:"_4-1-搭建分片集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-搭建分片集群"}},[s._v("#")]),s._v(" 4.1 搭建分片集群")]),s._v(" "),e("blockquote",[e("p",[s._v("主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决："),e("strong",[s._v("海量数据存储问题")]),s._v("  + "),e("strong",[s._v("高并发写的问题")])])]),s._v(" "),e("p",[s._v("使用分片集群可以解决上述问题，如图:\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725155747294.6dwlsmot55z4.webp",alt:""}}),s._v("\n分片集群特征：")]),s._v(" "),e("ul",[e("li",[s._v("集群中有多个master，每个master保存不同数据")]),s._v(" "),e("li",[s._v("每个master都可以有多个slave节点")]),s._v(" "),e("li",[s._v("master之间通过ping监测彼此健康状态")]),s._v(" "),e("li",[s._v("客户端请求可以访问集群任意节点，最终都会被转发到正确节点")])]),s._v(" "),e("h3",{attrs:{id:"_4-2-散列插槽"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-散列插槽"}},[s._v("#")]),s._v(" 4.2.散列插槽")]),s._v(" "),e("h4",{attrs:{id:"_4-2-1-插槽原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-插槽原理"}},[s._v("#")]),s._v(" 4.2.1.插槽原理")]),s._v(" "),e("p",[s._v("Redis会把每一个master节点映射到0~16383共16384个插槽（hash slot）上，查看集群信息时就能看到：\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725155820320.66v5q5xn7wg0.webp",alt:""}})]),s._v(" "),e("p",[s._v("数据key不是与节点绑定，而是与"),e("strong",[s._v("插槽绑定")]),s._v("。\nredis会根据key的有效部分计算插槽值，分两种情况：")]),s._v(" "),e("ul",[e("li",[s._v('key中包含"{}"，且“{}”中至少包含1个字符，“{}”中的部分是有效部分')]),s._v(" "),e("li",[s._v("key中不包含“{}”，整个key都是有效部分")])]),s._v(" "),e("blockquote",[e("p",[s._v("例如：key是num，那么就根据num计算，如果是{itcast}num，则根据itcast计算。计算方式是利用CRC16算法得到一个hash值，然后对16384取余，得到的结果就是slot值。")])]),s._v(" "),e("blockquote",[e("p",[s._v("如何将同一类数据固定的保存在同一个Redis实例？")])]),s._v(" "),e("ul",[e("li",[s._v("这一类数据使用相同的有效部分，例如key都以{typeId}为前缀")])]),s._v(" "),e("h3",{attrs:{id:"_4-3-集群伸缩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-集群伸缩"}},[s._v("#")]),s._v(" 4.3 集群伸缩")]),s._v(" "),e("blockquote",[e("p",[s._v("添加或删除节点")])]),s._v(" "),e("p",[s._v("redis-cli --cluster提供了很多操作集群的命令，可以通过下面方式查看：\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725160138290.4zclhey3rgjk.webp",alt:""}})]),s._v(" "),e("ul",[e("li",[s._v("reshard命令可以转移插槽")])]),s._v(" "),e("h3",{attrs:{id:"_4-4-故障转移"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-故障转移"}},[s._v("#")]),s._v(" 4.4 故障转移")]),s._v(" "),e("h4",{attrs:{id:"_4-4-1-自动故障转移"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-自动故障转移"}},[s._v("#")]),s._v(" 4.4.1 自动故障转移")]),s._v(" "),e("blockquote",[e("p",[s._v("直接停止一个redis实例，例如7002")])]),s._v(" "),e("p",[s._v("1）首先是该实例与其它实例失去连接\n2）然后是疑似宕机：\n3）最后是确定下线，自动提升一个slave为新的master：\n4）当7002再次启动，就会变为一个slave节点了：")]),s._v(" "),e("h4",{attrs:{id:"_4-4-2-手动故障转移"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-手动故障转移"}},[s._v("#")]),s._v(" 4.4.2 手动故障转移")]),s._v(" "),e("blockquote",[e("p",[s._v("利用"),e("strong",[s._v("cluster failover")]),s._v("命令可以手动让集群中的某个master宕机，切换到执行cluster failover命令的这个slave节点，实现无感知的数据迁移。")])]),s._v(" "),e("p",[e("strong",[s._v("其流程如下")]),s._v("：\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210725162441407.29y70vebqvr4.webp",alt:""}})]),s._v(" "),e("p",[s._v("这种failover命令可以指定三种模式：")]),s._v(" "),e("ul",[e("li",[s._v("缺省：默认的流程，如图1~6歩")]),s._v(" "),e("li",[s._v("force：省略了对offset的一致性校验")]),s._v(" "),e("li",[s._v("takeover：直接执行第5歩，忽略数据一致性、忽略master状态和其它master的意见")])])])}),[],!1,null,null,null);e.default=v.exports}}]);