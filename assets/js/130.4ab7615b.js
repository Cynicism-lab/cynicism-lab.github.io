(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{488:function(a,t,n){"use strict";n.r(t);var i=n(8),o=Object(i.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"_1-boot-启动过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-boot-启动过程"}},[a._v("#")]),a._v(" 1. Boot 启动过程")]),a._v(" "),t("p",[t("strong",[a._v("阶段一：SpringApplication 构造")])]),a._v(" "),t("ol",[t("li",[a._v("记录 BeanDefinition 源")]),a._v(" "),t("li",[a._v("推断应用类型( "),t("strong",[a._v("web、非Web、reactive")]),a._v(")")]),a._v(" "),t("li",[a._v("记录 ApplicationContext 初始化器")]),a._v(" "),t("li",[a._v("记录监听器")]),a._v(" "),t("li",[a._v("推断主启动类")])]),a._v(" "),t("p",[t("strong",[a._v("阶段二：执行 run 方法")])]),a._v(" "),t("ol",[t("li",[t("p",[a._v("得到 SpringApplicationRunListeners，实际是事件发布器")]),a._v(" "),t("ul",[t("li",[a._v("发布 application starting 事件")])])]),a._v(" "),t("li",[t("p",[a._v("封装启动 args("),t("strong",[a._v("ApplicationArguments")]),a._v(")")])]),a._v(" "),t("li",[t("p",[a._v("准备 Environment 添加命令行参数（*）")])]),a._v(" "),t("li",[t("p",[a._v("ConfigurationPropertySources 处理（"),t("strong",[a._v("读取配置信息")]),a._v("）")]),a._v(" "),t("ul",[t("li",[a._v("发布 application environment 已准备事件")])])]),a._v(" "),t("li",[t("p",[a._v("通过 EnvironmentPostProcessorApplicationListener 进行 env 后处理（*）")]),a._v(" "),t("ul",[t("li",[a._v("application.properties，由 StandardConfigDataLocationResolver 解析")]),a._v(" "),t("li",[a._v("spring.application.json")])])]),a._v(" "),t("li",[t("p",[a._v("绑定 spring.main 到 SpringApplication 对象（*）")])]),a._v(" "),t("li",[t("p",[a._v("打印 banner（*）")])]),a._v(" "),t("li",[t("p",[a._v("创建容器")])]),a._v(" "),t("li",[t("p",[a._v("准备容器")]),a._v(" "),t("ul",[t("li",[a._v("发布 application context 已初始化事件")])])]),a._v(" "),t("li",[t("p",[a._v("加载 bean 定义")]),a._v(" "),t("ul",[t("li",[a._v("发布 application prepared 事件")])])]),a._v(" "),t("li",[t("p",[a._v("refresh 容器")]),a._v(" "),t("ul",[t("li",[a._v("发布 application started 事件")])])]),a._v(" "),t("li",[t("p",[a._v("执行 runner")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("发布 application ready 事件")])]),a._v(" "),t("li",[t("p",[a._v("这其中有异常，发布 application failed 事件")])])])])]),a._v(" "),t("h2",{attrs:{id:"_2-tomcat-内嵌容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-tomcat-内嵌容器"}},[a._v("#")]),a._v(" 2. Tomcat 内嵌容器")]),a._v(" "),t("p",[t("strong",[a._v("Tomcat 基本结构")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Server\n└───Service\n    ├───Connector (协议, 端口)\n    └───Engine\n        └───Host(虚拟主机 localhost)\n            ├───Context1 (应用1, 可以设置虚拟路径, / 即 url 起始路径; 项目磁盘路径, 即 docBase )\n            │   │   index.html\n            │   └───WEB-INF\n            │       │   web.xml (servlet, filter, listener) 3.0后抛弃\n            │       ├───classes (servlet, controller, service ...)\n            │       ├───jsp(动态页面)\n            │       └───lib (第三方 jar 包)\n            └───Context2 (应用2)\n                │   index.html\n                └───WEB-INF\n                        web.xml\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("h2",{attrs:{id:"_3-boot-自动配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-boot-自动配置"}},[a._v("#")]),a._v(" 3. Boot 自动配置")]),a._v(" "),t("h3",{attrs:{id:"_3-1-aopautoconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-aopautoconfiguration"}},[a._v("#")]),a._v(" 3.1 AopAutoConfiguration")]),a._v(" "),t("p",[a._v("Spring Boot 是利用了自动配置类来简化了 aop 相关配置")]),a._v(" "),t("ul",[t("li",[a._v("AOP 自动配置类为 "),t("code",[a._v("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration")])]),a._v(" "),t("li",[a._v("可以通过 "),t("code",[a._v("spring.aop.auto=false")]),a._v(" 禁用 aop 自动配置")]),a._v(" "),t("li",[a._v("AOP 自动配置的本质是通过 "),t("code",[a._v("@EnableAspectJAutoProxy")]),a._v(" 来开启了自动代理，如果在引导类上自己添加了 "),t("code",[a._v("@EnableAspectJAutoProxy")]),a._v(" 那么以自己添加的为准")]),a._v(" "),t("li",[t("code",[a._v("@EnableAspectJAutoProxy")]),a._v(" 的本质是向容器中添加了 "),t("code",[a._v("AnnotationAwareAspectJAutoProxyCreator")]),a._v(" 这个 bean 后处理器，它能够找到容器中所有切面，并为匹配切点的目标类创建代理，创建代理的工作一般是在 bean 的初始化阶段完成的")])]),a._v(" "),t("h3",{attrs:{id:"_3-2-datasourceautoconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-datasourceautoconfiguration"}},[a._v("#")]),a._v(" 3.2 DataSourceAutoConfiguration")]),a._v(" "),t("ul",[t("li",[a._v("对应的自动配置类为：org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration")]),a._v(" "),t("li",[a._v("它内部采用了条件装配，通过检查容器的 bean，以及类路径下的 class，来决定该 @Bean 是否生效")])]),a._v(" "),t("p",[a._v("简单说明一下，Spring Boot 支持两大类数据源：")]),a._v(" "),t("ul",[t("li",[a._v("EmbeddedDatabase - 内嵌数据库连接池")]),a._v(" "),t("li",[a._v("PooledDataSource - 非内嵌数据库连接池")])]),a._v(" "),t("p",[a._v("PooledDataSource 又支持如下数据源")]),a._v(" "),t("ul",[t("li",[a._v("hikari 提供的 HikariDataSource")]),a._v(" "),t("li",[a._v("tomcat-jdbc 提供的 DataSource")]),a._v(" "),t("li",[a._v("dbcp2 提供的 BasicDataSource")]),a._v(" "),t("li",[a._v("oracle 提供的 PoolDataSourceImpl")])]),a._v(" "),t("p",[a._v("如果知道数据源的实现类类型，即指定了 "),t("code",[a._v("spring.datasource.type")]),a._v("，理论上可以支持所有数据源，但这样做的一个最大问题是无法订制每种数据源的详细配置（如最大、最小连接数等）")]),a._v(" "),t("h3",{attrs:{id:"_3-3-mybatisautoconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-mybatisautoconfiguration"}},[a._v("#")]),a._v(" 3.3 MybatisAutoConfiguration")]),a._v(" "),t("ul",[t("li",[a._v("MyBatis 自动配置类为 "),t("code",[a._v("org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration")])]),a._v(" "),t("li",[a._v("它主要配置了两个 bean\n"),t("ul",[t("li",[a._v("SqlSessionFactory - MyBatis 核心对象，用来创建 SqlSession")]),a._v(" "),t("li",[a._v("SqlSessionTemplate - SqlSession 的实现，此实现会与当前线程绑定")]),a._v(" "),t("li",[a._v("用 ImportBeanDefinitionRegistrar 的方式扫描所有标注了 @Mapper 注解的接口")]),a._v(" "),t("li",[a._v("用 AutoConfigurationPackages 来确定扫描的包")])])]),a._v(" "),t("li",[a._v("还有一个相关的 bean：MybatisProperties，它会读取配置文件中带 "),t("code",[a._v("mybatis.")]),a._v(" 前缀的配置项进行定制配置")])]),a._v(" "),t("h3",{attrs:{id:"_3-4-transactionautoconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-transactionautoconfiguration"}},[a._v("#")]),a._v(" 3.4 TransactionAutoConfiguration")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("事务自动配置类有两个：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration")])]),a._v(" "),t("li",[t("code",[a._v("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration")])])])]),a._v(" "),t("li",[t("p",[a._v("前者配置了 DataSourceTransactionManager 用来执行事务的提交、回滚操作")])]),a._v(" "),t("li",[t("p",[a._v("后者功能上对标 @EnableTransactionManagement，包含以下三个 bean")]),a._v(" "),t("ul",[t("li",[a._v("BeanFactoryTransactionAttributeSourceAdvisor 事务切面类，包含通知和切点")]),a._v(" "),t("li",[a._v("TransactionInterceptor 事务通知类，由它在目标方法调用前后加入事务操作")]),a._v(" "),t("li",[a._v("AnnotationTransactionAttributeSource 会解析 @Transactional 及事务属性，也包含了切点功能")])])]),a._v(" "),t("li",[t("p",[a._v("如果自己配置了 DataSourceTransactionManager 或是在引导类加了 @EnableTransactionManagement，则以自己配置的为准")])])]),a._v(" "),t("h3",{attrs:{id:"_3-5-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-小结"}},[a._v("#")]),a._v(" 3.5 小结")]),a._v(" "),t("ol",[t("li",[a._v("自动配置类本质上就是一个配置类而已，只是用 "),t("strong",[a._v("META-INF/spring.factories")]),a._v(" 管理，与应用配置类解耦")]),a._v(" "),t("li",[a._v("@Enable 打头的注解本质是利用了 @Import")]),a._v(" "),t("li",[a._v("@Import 配合 DeferredImportSelector 即可实现导入，selectImports 方法的返回值即为要导入的配置类名")]),a._v(" "),t("li",[a._v("DeferredImportSelector 的导入会在最后执行，为的是让其它配置优先解析")])])])}),[],!1,null,null,null);t.default=o.exports}}]);