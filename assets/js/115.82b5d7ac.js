(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{475:function(s,t,a){"use strict";a.r(t);var e=a(8),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-微服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-微服务"}},[s._v("#")]),s._v(" 1. 微服务")]),s._v(" "),t("h3",{attrs:{id:"_1-1-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-介绍"}},[s._v("#")]),s._v(" 1.1 介绍")]),s._v(" "),t("p",[s._v("微服务的架构特征：")]),s._v(" "),t("ul",[t("li",[s._v("单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责")]),s._v(" "),t("li",[s._v("自治：团队独立、技术独立、数据独立，独立部署和交付")]),s._v(" "),t("li",[s._v("面向服务：服务提供统一标准的接口，与语言和技术无关")]),s._v(" "),t("li",[s._v("隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210713203753373.4uyyetye63gg.webp",alt:""}})]),s._v(" "),t("p",[s._v("微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。")]),s._v(" "),t("p",[s._v("因此，可以认为"),t("strong",[s._v("微服务")]),s._v("是一种经过良好架构设计的"),t("strong",[s._v("分布式架构方案")])]),s._v(" "),t("h3",{attrs:{id:"_1-2-springcloud"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-springcloud"}},[s._v("#")]),s._v(" 1.2 SpringCloud")]),s._v(" "),t("p",[s._v("SpringCloud是目前国内使用最广泛的微服务框架。官网地址：https://spring.io/projects/spring-cloud。")]),s._v(" "),t("p",[s._v("SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。")]),s._v(" "),t("p",[s._v("其中常见的组件包括：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210713204155887.5ybczbnpce80.webp",alt:""}})]),s._v(" "),t("p",[s._v("另外，SpringCloud底层是依赖于SpringBoot的，并且有版本的兼容关系，如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210713205003790.3xlp0rogxs74.webp",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_1-3-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-总结"}},[s._v("#")]),s._v(" 1.3 总结")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统")])]),s._v(" "),t("li",[t("p",[s._v("分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝")])]),s._v(" "),t("li",[t("p",[s._v("微服务：一种良好的分布式架构方案")]),s._v(" "),t("p",[s._v("①优点：拆分粒度更小、服务更独立、耦合度更低")]),s._v(" "),t("p",[s._v("②缺点：架构非常复杂，运维、监控、部署难度提高")])]),s._v(" "),t("li",[t("p",[s._v("SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件")])])]),s._v(" "),t("h2",{attrs:{id:"_2-服务拆分和远程调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-服务拆分和远程调用"}},[s._v("#")]),s._v(" 2. 服务拆分和远程调用")]),s._v(" "),t("h3",{attrs:{id:"_2-1-服务拆分原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-服务拆分原则"}},[s._v("#")]),s._v(" 2.1 服务拆分原则")]),s._v(" "),t("p",[s._v("这里我总结了微服务拆分时的几个原则：")]),s._v(" "),t("ul",[t("li",[s._v("不同微服务，不要重复开发相同业务")]),s._v(" "),t("li",[s._v("微服务数据独立，不要访问其它微服务的数据库")]),s._v(" "),t("li",[s._v("微服务可以将自己的业务暴露为接口，供其它微服务调用\n"),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210713210800950.1qw3iws4ooww.webp",alt:""}})])]),s._v(" "),t("h3",{attrs:{id:"_2-2-远程调用-resttemplate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-远程调用-resttemplate"}},[s._v("#")]),s._v(" 2.2 远程调用 —— RestTemplate")]),s._v(" "),t("p",[s._v("RestTemplate 是 Spring 框架提供的一个用于进行 HTTP 请求的模板类，它简化了 Java 开发人员与 RESTful 服务的交互。通过 RestTemplate，我们可以发送 GET、POST、PUT、DELETE 等类型的 HTTP 请求，并且可以将返回的结果直接转换为需要的对象类型。")]),s._v(" "),t("p",[s._v("使用 RestTemplate 发送 HTTP 请求通常需要以下几个步骤：")]),s._v(" "),t("ul",[t("li",[s._v("创建 RestTemplate 对象：")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RestTemplate")]),s._v(" restTemplate "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RestTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("发送 HTTP 请求：")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" url "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://api.example.com/v1/users/{id}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" user "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" restTemplate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getForObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("在上述代码中，我们使用 getForObject() 方法发送一个 GET 请求，其中 url 表示请求的 URL，User.class 表示需要将响应转换为 User 类型的对象，1 表示 URL 中的占位符 {id} 的值。")])]),s._v(" "),t("ul",[t("li",[s._v("处理返回结果：")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("在上述代码中，我们将从服务端获取到的用户信息打印输出。")])]),s._v(" "),t("p",[s._v("RestTemplate 还提供了其他很多方便的方法，例如 postForObject()、put()、delete() 等，开发者可以根据具体需求进行选择。")]),s._v(" "),t("p",[s._v("需要注意的是，在使用 RestTemplate 发送 HTTP 请求时，需要注意处理异常情况，例如网络不可用，或者无法连接到指定的服务端等等。")]),s._v(" "),t("h2",{attrs:{id:"_2-3-提供者与消费者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-提供者与消费者"}},[s._v("#")]),s._v(" 2.3 提供者与消费者")]),s._v(" "),t("blockquote",[t("p",[s._v("在服务调用关系中，会有两个不同的角色：")])]),s._v(" "),t("p",[t("strong",[s._v("服务提供者")]),s._v("：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）")]),s._v(" "),t("p",[t("strong",[s._v("服务消费者")]),s._v("：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）")])])}),[],!1,null,null,null);t.default=n.exports}}]);