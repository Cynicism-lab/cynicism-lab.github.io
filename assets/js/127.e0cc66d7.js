(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{487:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("本文主要描述xml文件创建bean以及加载到IOC容器中的全部流程")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/bean.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_1-bean的创建方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-bean的创建方式"}},[t._v("#")]),t._v(" 1. Bean的创建方式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用"),a("strong",[t._v("Spring XML文件")]),t._v("方式配置：在XML配置文件中，使用<bean>  标签来定义Bean")])]),t._v(" "),a("li",[a("p",[t._v("使用"),a("strong",[t._v("注解")]),t._v("( "),a("strong",[t._v("javaweb")]),t._v(")：可以使用@Component、@Service、@Controller、@Repository等注解来定义Bean")])])]),t._v(" "),a("blockquote",[a("p",[t._v("@ComponentScan用于扫描指定包下的所有使用@Component定义的Bean")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用 "),a("strong",[t._v("@Bean")]),t._v(" 注解：在配置类中，可以使用@Bean注解来定义Bean，将某个方法的返回值作为一个bean")])]),t._v(" "),a("li",[a("p",[t._v("使用 "),a("strong",[t._v("@Import")]),t._v("注解：可以使用@Import注解来导入其他配置类或者直接导入Bean类")])]),t._v(" "),a("li",[a("p",[t._v("使用"),a("strong",[t._v("ImportSelector")]),t._v("或者"),a("strong",[t._v("ImportBeanDefinitionRegistrar")]),t._v("接口：配合@Import注解，可以实现更复杂的逻辑来定义Bean")])]),t._v(" "),a("li",[a("p",[t._v("使用"),a("strong",[t._v("工厂方法")]),t._v("：可以定义一个工厂类，然后在工厂类中定义静态或者实例方法来创建Bean")])])]),t._v(" "),a("h2",{attrs:{id:"_2-bean的作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-bean的作用域"}},[t._v("#")]),t._v(" 2. Bean的作用域")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("作用域")]),t._v(" "),a("p",[t._v("在Spring框架中，Bean的作用域（Scope）决定了Bean在应用程序各种上下文中的生命周期和可见性，可通过@Scope注解指定作用域")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Singleton")]),t._v("："),a("strong",[t._v("这是默认的作用域")]),t._v("。对于每个Spring IoC容器，每个单例Bean的定义都对应一个对象实例")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Prototype")]),t._v("：对于每个Bean定义，每次请求都会创建一个新的对象实例")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Request")]),t._v("：对于每个Bean定义，每个HTTP请求都会创建一个新的对象实例。这个作用域只在web-aware的Spring ApplicationContext中有效")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Session")]),t._v("：对于每个Bean定义，每个HTTP会话都会创建一个新的对象实例。这个作用域只在web-aware的Spring ApplicationContext中有效")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Application")]),t._v("：对于每个Bean定义，每个ServletContext都会创建一个新的对象实例。这个作用域只在web-aware的Spring ApplicationContext中有效")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Websocket")]),t._v("：对于每个Bean定义，每个WebSocket都会创建一个新的对象实例。这个作用域只在web-aware的Spring ApplicationContext中有效")])])]),t._v(" "),a("h2",{attrs:{id:"_3-beandefinitionreader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-beandefinitionreader"}},[t._v("#")]),t._v(" 3. BeanDefinitionReader")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("BeanDefinitionReader的作用是读取Spring配置文件中的内容，将其转换为IoC容器内部的数据结构：BeanDefinition")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassPathResource")]),t._v(" resource "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassPathResource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"application_context.xml"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultListableBeanFactory")]),t._v(" factory "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultListableBeanFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XmlBeanDefinitionReader")]),t._v(" reader "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XmlBeanDefinitionReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    reader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadBeanDefinitions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resource"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("blockquote",[a("p",[t._v("上述的"),a("strong",[t._v("XmlBeanDefinitionReader")]),t._v("类作为 AbstractBeanDefinitionReader 的扩展类，继承了 AbstractBeanDefinitionReader 所有的方法，同时也扩展了很多新的方法，主要用于读取 XML 文件中定义的 bean")])]),t._v(" "),a("p",[a("strong",[t._v("代码分析：")])]),t._v(" "),a("ol",[a("li",[t._v("获取xml文件资源")]),t._v(" "),a("li",[t._v("获取BeanFactory，DefaultListableBeanFactory()是最重要的实现类之一")]),t._v(" "),a("li",[t._v("根据新建的 BeanFactory 创建一个BeanDefinitionReader对象，该Reader 对象为"),a("strong",[t._v("资源的解析器")])]),t._v(" "),a("li",[t._v("装载资源： 整个过程就分为三个步骤：资源定位、装载、注册"),a("br"),t._v(" "),a("strong",[t._v("4.1 定位")]),t._v(": IoC 容器的第一步就是需要定位这个外部资源"),a("br"),t._v(" "),a("strong",[t._v("4.2 装载")]),t._v(": 装载就是 BeanDefinition 的载入，BeanDefinitionReader 读取、解析 Resource 资源，也就是将用户定义的 Bean 表示成 IoC 容器 的内部数据结构：BeanDefinition。在 IoC 容器内部维护着一个 BeanDefinition Map 的数据结构，在配置文件中每一个<bean>都对应着一个 BeanDefinition 对象。"),a("br"),t._v(" "),a("strong",[t._v("4.3 注册")]),t._v(":向 IoC 容器注册在第二步解析好的 BeanDefinition，这个过程是通过 BeanDefinitionRegistry 接口来实现的。本质上是将解析得到的 BeanDefinition 注入到一个 HashMap 容器中，IoC 容器就是通过这个 HashMap HashMap 来维护这些 BeanDefinition 的")])]),t._v(" "),a("blockquote",[a("p",[t._v("注意：此过程并没有完成依赖注入，依赖注册是发生在应用第一次调用 getBean()向容器索要 Bean 时")])]),t._v(" "),a("h2",{attrs:{id:"_4-beanfactorypostprocessor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-beanfactorypostprocessor"}},[t._v("#")]),t._v(" 4. BeanFactoryPostProcessor")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("BeanFactoryPostProcessor允许我们在Spring容器"),a("strong",[t._v("实例化bean之前")]),t._v("，对bean的定义（配置元数据）进行修改。例如，我们可以修改bean的scope，是否懒加载，是否是抽象的，以及bean的属性值等。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomBeanFactoryPostProcessor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanFactoryPostProcessor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableListableBeanFactory")]),t._v(" beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取bean定义")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinition")]),t._v(" beanDefinition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"beanName"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改bean定义")]),t._v("\n        beanDefinition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setScope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SCOPE_PROTOTYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[a("strong",[t._v("代码分析")]),t._v("：通过实现BeanFactoryPostProcessor的postProcessBeanFactory（）方法实现修改BeanDefinition")]),t._v(" "),a("blockquote",[a("p",[t._v("BeanFactoryPostProcessor的一些其他实现子类扩展了一些功能，例如PropertySourcesPlaceholderConfigurer是一个BeanFactoryPostProcessor，它可以解析@PropertySource注解，用于加载属性文件，ConfigurationClassPostProcessor 可以解析\n@ComponentScan，@Bean，@Import，@ImportResource等等")])]),t._v(" "),a("h2",{attrs:{id:"_5-beanfactory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-beanfactory"}},[t._v("#")]),t._v(" 5. BeanFactory")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("BeanFactory是Spring框架的核心接口，它负责实例化、定位、配置应用程序中的对象以及建立这些对象间的依赖。简单来说，BeanFactory就是一个管理Bean的工厂，它主要负责初始化各种Bean，并调用它们的生命周期方法")])]),t._v(" "),a("p",[t._v("以下是BeanFactory的主要功能：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("实例化Bean")]),t._v("：BeanFactory通过"),a("strong",[t._v("反射")]),t._v("根据配置信息创建Bean的实例")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("管理Bean的生命周期")]),t._v("：BeanFactory负责调用Bean的初始化方法和销毁方法，管理Bean的生命周期")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("处理Bean的依赖关系")]),t._v("：BeanFactory负责处理Bean之间的依赖关系，例如自动装配和依赖注入")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("提供Bean的查询和查找功能")]),t._v("：BeanFactory提供了一些方法，例如getBean()，containsBean()，isSingleton()，isPrototype()，isTypeMatch()，getType()和getAliases()，用于查询和查找Bean")])])]),t._v(" "),a("h2",{attrs:{id:"_6-populatebean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-populatebean"}},[t._v("#")]),t._v(" 6. populateBean")]),t._v(" "),a("p",[t._v("populateBean方法是Spring框架中AbstractAutowireCapableBeanFactory类的一个重要方法。它主要负责Bean实例的各种依赖注入，包括自动注入（名称注入和类型注入）、注解注入（@Autowired 和 @Value 等）、手动注入等。")]),t._v(" "),a("p",[t._v("以下是populateBean方法的主要步骤：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("激活InstantiationAwareBeanPostProcessor后置处理器的postProcessAfterInstantiation方法：在实例化bean之后，Spring属性填充之前执行的钩子方法")])]),t._v(" "),a("li",[a("p",[t._v("解析依赖注入的方式，将属性装配到PropertyValues中：根据注入方式（如名称注入或类型注入）解析属性，并将解析的属性值添加到PropertyValues中")])]),t._v(" "),a("li",[a("p",[t._v("激活InstantiationAwareBeanPostProcessor#postProcessProperties：对@AutoWired标记的属性进行依赖注入")])]),t._v(" "),a("li",[a("p",[t._v("将解析的值用BeanWrapper进行包装：将PropertyValues中的属性值应用到Bean实例中")])])]),t._v(" "),a("h2",{attrs:{id:"_7-aware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-aware"}},[t._v("#")]),t._v(" 7. Aware")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("在Spring框架中，Aware接口是一组标记接口，用于在Bean装配的过程中获取Spring容器中提供的一些核心组件或运行时上下文等信息。"),a("strong",[t._v("实现了Aware接口的Bean可以访问Spring容器")])])]),t._v(" "),a("p",[t._v("以下是一些常见的Aware接口：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("BeanNameAware：可以获取到Spring容器中Bean的名称")])]),t._v(" "),a("li",[a("p",[t._v("BeanFactoryAware：可以获取到当前的BeanFactory，从而可以调用容器的服务")])]),t._v(" "),a("li",[a("p",[t._v("ApplicationContextAware：可以获取到当前的ApplicationContext，从而可以调用容器的服务")])]),t._v(" "),a("li",[a("p",[t._v("MessageSourceAware：可以获取到Message Source，从而可以获取相关的文本信息")])]),t._v(" "),a("li",[a("p",[t._v("ApplicationEventPublisherAware：可以获取到ApplicationEventPublisher，从而可以发布事件")])]),t._v(" "),a("li",[a("p",[t._v("ResourceLoaderAware：可以获取到ResourceLoader，从而可以加载外部资源文件")])])]),t._v(" "),a("h2",{attrs:{id:"_8-beanpostprocessor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-beanpostprocessor"}},[t._v("#")]),t._v(" 8. BeanPostProcessor")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("BeanPostProcessor是Spring框架中的一个重要接口，它允许我们"),a("strong",[t._v("在Spring容器实例化、配置和初始化Bean之后，以及在销毁Bean之前")]),t._v("，对Bean进行一些自定义的操作")])]),t._v(" "),a("p",[t._v("以下是BeanPostProcessor的主要功能：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("在初始化之前和之后修改Bean")]),t._v("：BeanPostProcessor接口定义了两个方法：postProcessBeforeInitialization和postProcessAfterInitialization。这两个方法分别在Bean初始化之前和之后被调用，允许我们在这两个时间点对Bean进行修改")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("处理自定义注解")]),t._v("：BeanPostProcessor可以用来处理自定义注解。例如，我们可以创建一个BeanPostProcessor，在postProcessBeforeInitialization方法中检查Bean是否有某个自定义注解，如果有，则进行相应的处理")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("包装Bean")]),t._v("：BeanPostProcessor还可以用来包装Bean。例如，我们可以在postProcessAfterInitialization方法中返回一个包装了原始Bean的"),a("strong",[t._v("代理对象")]),t._v("(cglib或者jdk代理)")])])]),t._v(" "),a("h2",{attrs:{id:"_9-init-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-init-method"}},[t._v("#")]),t._v(" 9. init-method")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("在Spring框架中，init-method属性用于在bean初始化时指定执行的方法。这个方法会在bean实例化并设置好属性之后被调用，通常用于完成一些初始化工作")])]),t._v(" "),a("p",[t._v("以下是一些常见的例子：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("加载数据")]),t._v("：初始化方法可以用于在启动应用程序后立即加载一些数据。例如，你可能需要从数据库中拉取一些数据并缓存起来")]),t._v(" "),a("li",[a("strong",[t._v("读取配置变量")]),t._v("：初始化方法可以用于读取配置文件中的变量，并将这些变量设置到Bean的属性中")]),t._v(" "),a("li",[a("strong",[t._v("设置资源")]),t._v("：初始化方法可以用于设置一些资源，例如打开文件或者网络连接")]),t._v(" "),a("li",[a("strong",[t._v("执行业务逻辑")]),t._v("：初始化方法可以用于执行一些业务逻辑，例如计算一些值或者更新一些状态")])]),t._v(" "),a("blockquote",[a("p",[t._v("需要注意的是，init-method指定的初始化方法会在Bean实例化并设置好属性之后被调用，因此你可以在这个方法中访问和修改Bean的所有属性")])]),t._v(" "),a("h2",{attrs:{id:"_10-三级缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-三级缓存"}},[t._v("#")]),t._v(" 10. 三级缓存")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("Spring中的循环依赖是指在Spring应用程序中，两个或多个类之间存在彼此依赖的情况，形成一个循环依赖链。例如，A依赖B，B又依赖A，A和B之间就形成了相互依赖的关系")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/circle.png",alt:""}})]),t._v(" "),a("p",[a("mark",[t._v("Spring解决循环依赖的方式主要是通过三级缓存")]),t._v("\n这三级缓存的作用是在创建Bean的过程中，当一个Bean在初始化时需要另一个Bean的实例，而另一个Bean又需要第一个Bean的实例时，"),a("strong",[t._v("Spring会先将已经实例化但还未完成初始化的Bean提前暴露出去")]),t._v("，也就是加入到缓存中，这样就可以被其他Bean引用，从而打破循环依赖")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一级缓存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" singletonObjects "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentHashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二级缓存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" earlySingletonObjects "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentHashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 三级缓存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" singletonFactories "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("ul",[a("li",[t._v("一级缓存用于"),a("strong",[t._v("存放容器中可以使用的bean或者代理bean")]),t._v(" (成熟品)")]),t._v(" "),a("li",[t._v("二级缓存用于"),a("strong",[t._v("存放实例化的原始对象（的代理对象）")]),t._v("（半成品），以让在有多重循环依赖的时候其它对象都从二级缓存中拿到同一个当前原始对象（的代理对象），并且只有在调用了三级缓存中的"),a("strong",[t._v("ObjectFactory的getObject() 方法")]),t._v("获取原始对象（的代理对象）时，才会将原始对象（的代理对象）放入二级缓存")])]),t._v(" "),a("blockquote",[a("p",[t._v("调用三级缓存中的ObjectFactory的getObject() 方法获取原始对象（的代理对象）这种情况只会发生在有循环依赖的时候，所以，二级缓存在没有循环依赖的情况下不会被使用到。")])]),t._v(" "),a("ul",[a("li",[t._v("三级缓存用于"),a("strong",[t._v("存放原始对象对应的ObjectFactory")]),t._v("，每生成一个原始对象，都会将这个原始对象对应的ObjectFactory放到三级缓存中，"),a("strong",[t._v("通过调用ObjectFactory的getObject() 方法，就能够在需要动态代理的情况下为原始对象生成代理对象并返回，否则返回原始对象，以此来处理循环依赖时还需要动态代理的情况。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("ObjectFactory是一个函数式接口，仅有一个方法，可以传入lambda表达式或者内部类，通过调用getObject()方法执行具体的逻辑,例如getEarlyBeanReference()，实现在需要动态代理的情况下为原始对象生成代理对象并返回，否则返回原始对象")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将Aservice添加三级缓存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addSingletonFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEarlyBeanReference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mbd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加B的A属性时从三级中找A的ObjectFactory类型一个匿名内部类对象，从而触发匿名内部类getEarlyBeanReference()方法回调，进入创建AService切面代理对象逻辑")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEarlyBeanReference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RootBeanDefinition")]),t._v(" mbd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原始对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" exposedObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("mbd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSynthetic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasInstantiationAwareBeanPostProcessors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断后置处理器是否实现了SmartInstantiationAwareBeanPostProcessor接口")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用SmartInstantiationAwareBeanPostProcessor的getEarlyBeanReference")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SmartInstantiationAwareBeanPostProcessor")]),t._v(" bp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanPostProcessorCache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("smartInstantiationAware"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            exposedObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEarlyBeanReference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exposedObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" exposedObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("🔎然而，Spring解决循环依赖是有前置条件的：")]),t._v(" "),a("ul",[a("li",[t._v("出现循环依赖的Bean必须要是单例。")]),t._v(" "),a("li",[t._v("依赖注入的方式不能全是构造器注入的方式")])]),t._v(" "),a("p",[a("strong",[t._v("具体循环依赖解决流程实现图：")]),t._v(" "),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/%E6%B5%81%E7%A8%8B.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("只使用一级缓存的问题")]),a("br"),t._v("\n一级缓存中预期存放的是一个正常完整的bean，而如果只用一级缓存来解决循环依赖，那么一级缓存中会在某个时间段存在不完整的bean，这是不安全的。")]),t._v(" "),a("p",[a("strong",[t._v("什么不直接使用一级缓存和二级缓存解决循环依赖")]),a("br"),t._v("\n使用一级缓存和二级缓存确实可以解决循环依赖，但是这要求每个原始对象创建出来后就立即生成动态代理对象（如果有的话），然后将这个动态代理对象放入二级缓存，这就打破了Spring对AOP的设计原则，即："),a("strong",[t._v("在对象初始化完毕后，再去创建代理对象")]),t._v("。")]),t._v(" "),a("p",[t._v("🔎所以引入三级缓存，并且在三级缓存中存放一个对象的ObjectFactory，目的就是："),a("strong",[t._v("延迟代理对象的创建")])]),t._v(" "),a("p",[t._v("这里延迟到啥时候创建呢，有两种情况：")]),t._v(" "),a("ul",[a("li",[t._v("第一种就是确实存在循环依赖，那么没办法，只能在需要的时候就创建出来代理对象然后放到二级缓存中")]),t._v(" "),a("li",[t._v("第二种就是不存在循环依赖，那就是正常的在初始化的后置处理器中创建。")])]),t._v(" "),a("p",[a("mark",[t._v("因此不直接使用一级缓存和二级缓存来解决循环依赖的原因就是：希望在不存在循环依赖的情况下不破坏Spring对AOP的设计原则。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);