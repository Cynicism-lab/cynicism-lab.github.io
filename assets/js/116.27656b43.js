(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{476:function(e,a,s){"use strict";s.r(a);var t=s(8),r=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"_1-eureka注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-eureka注册中心"}},[e._v("#")]),e._v(" 1. Eureka注册中心")]),e._v(" "),a("p",[e._v("假如我们的服务提供者user-service部署了多个实例，如图：\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210713214925388.403ap9yuhh4w.webp",alt:""}})]),e._v(" "),a("p",[e._v("大家思考几个问题：")]),e._v(" "),a("ul",[a("li",[e._v("order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？")]),e._v(" "),a("li",[e._v("有多个user-service实例地址，order-service调用时该如何选择？")]),e._v(" "),a("li",[e._v("order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？")])]),e._v(" "),a("h3",{attrs:{id:"_1-1-eureka的结构和作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-eureka的结构和作用"}},[e._v("#")]),e._v(" 1.1 Eureka的结构和作用")]),e._v(" "),a("blockquote",[a("p",[e._v("这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210713220104956.6wsavydjrgqo.webp",alt:""}})]),e._v(" "),a("blockquote",[a("p",[e._v("问题1：order-service如何得知user-service实例地址？")])]),e._v(" "),a("p",[e._v("获取地址信息的流程如下：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("服务注册")]),e._v("：user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。")]),e._v(" "),a("li",[e._v("eureka-server保存服务名称到服务实例地址列表的映射关系")]),e._v(" "),a("li",[a("strong",[e._v("服务发现")]),e._v("：order-service根据服务名称，拉取实例地址列表。")])]),e._v(" "),a("blockquote",[a("p",[e._v("问题2：order-service如何从多个user-service实例中选择具体的实例？")])]),e._v(" "),a("ul",[a("li",[e._v("order-service从实例列表中利用"),a("strong",[e._v("负载均衡算法")]),e._v("选中一个实例地址")]),e._v(" "),a("li",[e._v("向该实例地址发起远程调用")])]),e._v(" "),a("blockquote",[a("p",[e._v("问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？")])]),e._v(" "),a("ul",[a("li",[e._v("user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳")]),e._v(" "),a("li",[e._v("当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除")]),e._v(" "),a("li",[e._v("order-service拉取服务时，就能将故障实例排除了")])]),e._v(" "),a("blockquote",[a("p",[e._v("注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端")])]),e._v(" "),a("p",[a("mark",[e._v("要使用eureka-server，必须构建一个独立的微服务模块")])]),e._v(" "),a("h2",{attrs:{id:"_2-ribbon负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-ribbon负载均衡"}},[e._v("#")]),e._v(" 2. Ribbon负载均衡")]),e._v(" "),a("h3",{attrs:{id:"_2-1-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-介绍"}},[e._v("#")]),e._v(" 2.1 介绍")]),e._v(" "),a("blockquote",[a("p",[e._v("SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210713224724673.478adofwsvi8.webp",alt:""}})]),e._v(" "),a("p",[a("strong",[e._v("基本流程如下")]),e._v("：")]),e._v(" "),a("ul",[a("li",[e._v("拦截我们的RestTemplate请求http://userservice/user/1")]),e._v(" "),a("li",[e._v("RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service")]),e._v(" "),a("li",[e._v("DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表")]),e._v(" "),a("li",[e._v("eureka返回列表，localhost:8081、localhost:8082")]),e._v(" "),a("li",[e._v("IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081")]),e._v(" "),a("li",[e._v("RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到http://localhost:8081/user/1，发起真实请求")])]),e._v(" "),a("h3",{attrs:{id:"_2-2-负载均衡策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-负载均衡策略"}},[e._v("#")]),e._v(" 2.2 负载均衡策略")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[e._v("内置负载均衡规则类")])]),e._v(" "),a("th",[a("strong",[e._v("规则描述")])])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("RoundRobinRule")]),e._v(" "),a("td",[e._v("简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。")])]),e._v(" "),a("tr",[a("td",[e._v("AvailabilityFilteringRule")]),e._v(" "),a("td",[e._v("对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的"),a("clientName",[e._v("."),a("clientConfigNameSpace",[e._v(".ActiveConnectionsLimit属性进行配置。")])],1)],1)]),e._v(" "),a("tr",[a("td",[e._v("WeightedResponseTimeRule")]),e._v(" "),a("td",[e._v("为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。")])]),e._v(" "),a("tr",[a("td",[a("strong",[e._v("ZoneAvoidanceRule")])]),e._v(" "),a("td",[e._v("以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。")])]),e._v(" "),a("tr",[a("td",[e._v("BestAvailableRule")]),e._v(" "),a("td",[e._v("忽略那些短路的服务器，并选择并发数较低的服务器。")])]),e._v(" "),a("tr",[a("td",[e._v("RandomRule")]),e._v(" "),a("td",[e._v("随机选择一个可用的服务器。")])]),e._v(" "),a("tr",[a("td",[e._v("RetryRule")]),e._v(" "),a("td",[e._v("重试机制的选择逻辑")])])])]),e._v(" "),a("blockquote",[a("p",[e._v("默认的实现就是ZoneAvoidanceRule，是一种轮询方案")])]),e._v(" "),a("h3",{attrs:{id:"_2-3-饥饿加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-饥饿加载"}},[e._v("#")]),e._v(" 2.3 饥饿加载")]),e._v(" "),a("p",[e._v("Ribbon默认是采用"),a("strong",[e._v("懒加载")]),e._v("，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。")]),e._v(" "),a("p",[e._v("而"),a("strong",[e._v("饥饿加载")]),e._v("则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：")]),e._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ribbon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("eager-load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("clients")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" userservice\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h2",{attrs:{id:"_3-nacos注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-nacos注册中心"}},[e._v("#")]),e._v(" 3. Nacos注册中心")]),e._v(" "),a("blockquote",[a("p",[e._v("Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别")])]),e._v(" "),a("h3",{attrs:{id:"_3-1-服务分级存储模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-服务分级存储模型"}},[e._v("#")]),e._v(" 3.1 服务分级存储模型")]),e._v(" "),a("p",[e._v("一个"),a("strong",[e._v("服务")]),e._v("可以有多个"),a("strong",[e._v("实例")]),e._v("，例如我们的user-service，可以有:")]),e._v(" "),a("ul",[a("li",[e._v("127.0.0.1:8081")]),e._v(" "),a("li",[e._v("127.0.0.1:8082")]),e._v(" "),a("li",[e._v("127.0.0.1:8083")])]),e._v(" "),a("p",[e._v("假如这些实例分布于全国各地的不同机房，例如：")]),e._v(" "),a("ul",[a("li",[e._v("127.0.0.1:8081，在上海机房")]),e._v(" "),a("li",[e._v("127.0.0.1:8082，在上海机房")]),e._v(" "),a("li",[e._v("127.0.0.1:8083，在杭州机房")])]),e._v(" "),a("p",[e._v("Nacos就将同一机房内的实例 划分为一个"),a("strong",[e._v("集群")]),e._v("。")]),e._v(" "),a("p",[e._v("也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210713232522531.6ndza8ad9i0w.webp",alt:""}})]),e._v(" "),a("p",[e._v("微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：杭州机房内的order-service应该优先访问同机房的user-service。")]),e._v(" "),a("blockquote",[a("p",[e._v("默认的"),a("code",[e._v("ZoneAvoidanceRule")]),e._v("并不能实现根据同集群优先来实现负载均衡。因此Nacos中提供了一个"),a("code",[e._v("NacosRule")]),e._v("的实现，可以优先从同集群中挑选实例。")])]),e._v(" "),a("h3",{attrs:{id:"_3-2-权重配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-权重配置"}},[e._v("#")]),e._v(" 3.2 权重配置")]),e._v(" "),a("p",[e._v("实际部署中会出现这样的场景：")]),e._v(" "),a("p",[e._v("服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。")]),e._v(" "),a("p",[e._v("但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。")]),e._v(" "),a("p",[e._v("因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("：如果权重修改为0，则该实例永远不会被访问")])]),e._v(" "),a("h3",{attrs:{id:"_3-3-环境隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-环境隔离"}},[e._v("#")]),e._v(" 3.3 环境隔离")]),e._v(" "),a("p",[e._v("Nacos提供了namespace来实现环境隔离功能。")]),e._v(" "),a("ul",[a("li",[e._v("nacos中可以有多个namespace")]),e._v(" "),a("li",[e._v("namespace下可以有group、service等")]),e._v(" "),a("li",[e._v("不同namespace之间相互隔离，例如不同namespace的服务互相不可见\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210714000101516.6mfbjqm124g0.webp",alt:""}})])]),e._v(" "),a("blockquote",[a("p",[e._v("默认情况下，所有service、data、group都在同一个namespace，名为public")])]),e._v(" "),a("h3",{attrs:{id:"_3-4-nacos与eureka的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-nacos与eureka的区别"}},[e._v("#")]),e._v(" 3.4 Nacos与Eureka的区别")]),e._v(" "),a("p",[e._v("Nacos的服务实例分为两种l类型：")]),e._v(" "),a("ul",[a("li",[e._v("临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。")]),e._v(" "),a("li",[e._v("非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。")])]),e._v(" "),a("p",[e._v("配置一个服务实例为永久实例：")]),e._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("discovery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ephemeral")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("false")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置为非临时实例")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Cynicism-lab/MyResource@gh-pages/image/image-20210714001728017.5wwctoieburk.webp",alt:""}})]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Nacos与eureka的共同点")]),e._v(" "),a("ul",[a("li",[e._v("都支持服务注册和服务拉取")]),e._v(" "),a("li",[e._v("都支持服务提供者心跳方式做健康检测")])])]),e._v(" "),a("li",[a("p",[e._v("Nacos与Eureka的区别")]),e._v(" "),a("ul",[a("li",[e._v("Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式")]),e._v(" "),a("li",[e._v("临时实例心跳不正常会被剔除，非临时实例则不会被剔除")]),e._v(" "),a("li",[e._v("Nacos支持服务列表变更的消息推送模式，服务列表更新更及时")]),e._v(" "),a("li",[e._v("Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);